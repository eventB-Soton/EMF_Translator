/*******************************************************************************
 * Copyright (c) 2014, 2018 University of Southampton.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    University of Southampton - initial API and implementation
 *******************************************************************************/
package ac.soton.emf.translator.configuration;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EModelElement;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.Resource.Factory.Registry;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.TransactionalEditingDomain;

import ac.soton.emf.translator.Activator;
import ac.soton.emf.translator.TranslationDescriptor;

/**
 * This implementation of IAdapter  
 * is a default for translation between any EMF meta-models
 * 
 *  @see ac.soton.emf.translator.configuration.IAdapter
 *  
 * @author cfs
 *
 */
public class DefaultAdapter implements IAdapter {


	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Do nothing.
	 * 
	 */
	@Override
	public void initialiseAdapter(Object rootSourceElement) {		
	}
	
	/**
	 * {@inheritDoc} 
	 * 
	 * DefaultAdapter implementation:
	 * Return true if feature is null.
	 * 
	 */
	@Override
	public boolean isRoot(TranslationDescriptor translationDescriptor) {
		return translationDescriptor.feature==null;
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Return null.
	 * 
	 */
	@Override
	public URI getComponentURI(TranslationDescriptor translationDescriptor, EObject rootSourceElement) {
		return null;
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Return all EMF resources in the same project as the source element.
	 * 
	 */
	@Override
	public Collection<Resource> getAffectedResources(TransactionalEditingDomain editingDomain, EObject sourceElement) throws IOException {
		List<Resource> affectedResources = new ArrayList<Resource>();
		//affectedResources.add(sourceElement.eResource());
		String projectName = EcoreUtil.getURI(sourceElement).segment(1);
		IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
		if (project.exists()){
			try {
				IResource[] members = project.members();
				ResourceSet resourceSet = editingDomain.getResourceSet();
				for (IResource res : members){
					final URI fileURI = URI.createPlatformResourceURI(projectName + "/" + res.getName(), true);
					Registry registry = Resource.Factory.Registry.INSTANCE;
					if (registry.getExtensionToFactoryMap().containsKey(fileURI.fileExtension())){
						Resource resource = resourceSet.getResource(fileURI, false);
						if (resource != null) {
							if (!resource.isLoaded()) {
								resource.load(Collections.emptyMap());
							}
							if (resource.isLoaded()) {
								affectedResources.add(resource);
							} 
						}
					}
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		return affectedResources;
	}
		
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Return null.
	 * 
	 * @since 4.0
	 */
	@Override
	public Object getTargetComponent(Object sourceElement) {
		return null;
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Filters out any elements that are already annotated to say that they were generated by this translation.
	 * 
	 */
	@Override
	public boolean inputFilter(Object object, String translationId) {
		return !wasGeneratedBy(object,translationId);
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Return true (i.e. do not filter anything).
	 * 
	 */
	@Override
	public boolean outputFilter(TranslationDescriptor translationDescriptor) {
		return true;
	}


	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Test whether two elements are equal using the equals method of el1
	 * (or, if el1 is null, whether e2 is also null).
	 */
	
	@Override
	public boolean match(Object el1, Object el2) {
		return el1==null? el2==null : el1.equals(el2);
	}


	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation:
	 * Return a string identifier made up of 3 parts as follows, separated by "::". 
	 * 	The first part is the given basicTranslatorID,
	 * 	the second part is the eClass name if rootSourceElement is an EObject or the class name if it is not,
	 *  the third part is the name of the rootSourceElement if it is an EnamedElement or just toString() if it is not.
	 * 
	 */
	@Override
	public String getTranslationId(String basicTranslatorID, Object rootSourceElement){
		String translatorID;
		if (rootSourceElement instanceof EObject) {
			if (rootSourceElement instanceof ENamedElement) {
				translatorID= basicTranslatorID+"::"+
						((EObject)rootSourceElement).eClass().getName()+"::"+
						((ENamedElement)rootSourceElement).getName();
			}else {
				translatorID= basicTranslatorID+"::"+
						((EObject)rootSourceElement).eClass().getName()+"::"+
						((EObject)rootSourceElement).toString();
			}
		}else {
			translatorID= basicTranslatorID+"::"+
					rootSourceElement.getClass().getName()+"::"+
					rootSourceElement.toString();
		}
		return translatorID;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * If the target is an EModelElement (i.e. has EAnnotations) and the translationID is not null
	 * adds an EAnnotation to target consisting of the key AttributeIdentifiers.TRANSLATOR__TRANSLATION_ID_KEY
	 * and value translationID.
	 * 
	 */
	@Override
	public void setGeneratedBy(Object target, String translationID) {
		if (target  instanceof EModelElement && translationID!=null) {
			EAnnotation annotation = ((EModelElement)target).getEAnnotation(Activator.PLUGIN_ID);
			annotation.getDetails().put(AttributeIdentifiers.TRANSLATOR__TRANSLATION_ID_KEY, translationID);
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation: 
	 * Return true if the target is an EModelElement (i.e. has EAnnotations) and the translationID is not null
	 * and the target has an EAnnotation with key=AttributeIdentifiers.TRANSLATOR__TRANSLATION_ID_KEY 
	 * and value=translationID. 
	 * Otherwise returns false.
	 * 
	 */
	@Override
	public boolean wasGeneratedBy(Object target, String translationID) {
		if (target instanceof EModelElement && translationID!=null) {
			EAnnotation annotation = ((EModelElement)target).getEAnnotation(Activator.PLUGIN_ID);
			return translationID.equals(annotation.getDetails().get(AttributeIdentifiers.TRANSLATOR__TRANSLATION_ID_KEY));
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation: 
	 * Do nothing.
	 *
	 */
	@Override
	public void setSourceElement(Object target, Object source) {
		
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation: 
	 * Do nothing.
	 * 
	 */
	@Override
	public void setPriority(Object target, int priority) {
	}

	/** 
	 * {@inheritDoc}
	 * 
	 * DefaultAdapter implementation: 
	 * Return the position representing the end of the list (i.e. list.size())
	 * 
	 */
	@Override
	public int getPos(List<?> list, Object object) {
		return list.size();
	}

}
